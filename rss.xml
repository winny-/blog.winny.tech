<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>blog.winny.tech</title>
<description>blog.winny.tech</description>
<link>https://blog.winny.tech/</link>
<lastBuildDate>Sat, 12 Jan 2019 04:56:41 -0600</lastBuildDate>
<item>
  <title>Publishing with org-static-blog</title>
  <description><![CDATA[

<div id="outline-container-orgb0412d7" class="outline-2">
<h2 id="orgb0412d7">Criteria</h2>
<div class="outline-text-2" id="text-orgb0412d7">
<p>
After reviewing a list of org-mode<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> capable static website generators<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>,
I decided to see if org-static-blog<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> could suffice my simple
needs. My criteria for choosing an org-mode static site generator was:
</p>

<ul class="org-ul">
<li>it must be actively maintained,</li>
<li>it must be simple to set up with customizations,</li>
<li>and it must work with Emacs 26 and later.</li>
</ul>

<p>
This ruled out quite a few right away. I didn't attempt using
org-publish, as it looked like a great deal of configuration to
achieve a minimum viable web-page for this project.
</p>
</div>
</div>

<div id="outline-container-org8ada359" class="outline-2">
<h2 id="org8ada359">Configuration of <code>org-static-blog</code></h2>
<div class="outline-text-2" id="text-org8ada359">
<p>
Following the org-static-blog README documentation, it is very
straight forward to get a minimal viable website generated. I added
the following to my <code>init.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(add-to-list 'auto-mode-alist (cons (concat org-static-blog-posts-directory <span style="color: #61CE3C;">".*\\.org\\'"</span>) 'org-static-blog-mode))
(<span style="color: #4c83ff;">setq</span> org-static-blog-publish-title <span style="color: #61CE3C;">"blog.winny.tech"</span>)
(<span style="color: #4c83ff;">setq</span> org-static-blog-publish-url <span style="color: #61CE3C;">"https://blog.winny.tech/"</span>)
(<span style="color: #4c83ff;">setq</span> org-static-blog-publish-directory <span style="color: #61CE3C;">"~/projects/blog/"</span>)
(<span style="color: #4c83ff;">setq</span> org-static-blog-posts-directory <span style="color: #61CE3C;">"~/projects/blog/posts/"</span>)
(<span style="color: #4c83ff;">setq</span> org-static-blog-drafts-directory <span style="color: #61CE3C;">"~/projects/blog/drafts/"</span>)
(<span style="color: #4c83ff;">setq</span> org-static-blog-enable-tags t)

(<span style="color: #4c83ff;">setq</span> org-static-blog-page-header
      <span style="color: #61CE3C;">"</span>
<span style="color: #61CE3C;">&lt;link href=\"static/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span>
<span style="color: #61CE3C;">"</span>)
</pre>
</div>

<p>
I opted to <code>setq</code> all the configuration variables; I will likely
switch to using <code>M-x customize-group RET org-static-blog RET</code> in the
future however. It's a better experience.
</p>

<p>
Then I simply create a new post with
<code>M-x org-static-blog-create-new-post RET &lt;TITLE&gt; RET</code>, edit the
buffer, save it, then run <code>M-x org-static-blog-publish RET</code>.
I also added some styling to my <code>style.css</code><sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> based off the Tachyons CSS
framework<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>. I had previously used Bootstrap<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup> for styling but was hoping
to avoid adding framework and other extra tooling that shouldn't
be necessary to generate a simple site like this one.
</p>
</div>
</div>

<div id="outline-container-org7eb2cf0" class="outline-2">
<h2 id="org7eb2cf0">Deploying with Caddy and GitHub</h2>
<div class="outline-text-2" id="text-org7eb2cf0">
<p>
I am a fan of the Caddy<sup><a id="fnr.7" class="footref" href="#fn.7">7</a></sup> web server which offers automatic HTTPS
via LetsEncrypt with only a few lines of configuration. In addition
Caddy has a plugin named git which offers the ability to
automatically deploy content from git repositories with webhook
support. To deploy the following steps are taken:
</p>

<ol class="org-ol">
<li><code>M-x org-static-blog-publish RET</code> from Emacs to regenerate the
static site,</li>
<li>commit the changes in git,</li>
<li>and finally push the git branch to GitHub.</li>
</ol>

<p>
After these steps, GitHub automatically sends a HTTP POST request to my Caddy
server with information about the new git commits and Caddy pulls the
git repository. If everything went well and the webhook successfully
fired, the website is now deployed.
</p>
</div>

<div id="outline-container-org2584aeb" class="outline-3">
<h3 id="org2584aeb">Server Configuration</h3>
<div class="outline-text-3" id="text-org2584aeb">
<p>
I switched most of my personal internet-related services to Docker<sup><a id="fnr.8" class="footref" href="#fn.8">8</a></sup> in
conjunction with <code>docker-compose</code><sup><a id="fnr.9" class="footref" href="#fn.9">9</a></sup> last year. The main rationale
is I can move my configuration without dealing with systems package
versions.  I already had Caddy set up,
so it was as simple as adding this to my <code>Caddyfile</code>:
</p>

<div class="org-src-container">
<pre class="src src-conf"><span style="color: #afd8af;">blog.winny.tech</span> {
        root /srv/www/blog.winny.tech
        gzip
        log /logs/blog.winny.tech.log
        git https://github.com/winny-/blog.winny.tech {
                hook /webhook top-secret-password-redacted
        }
}
</pre>
</div>

<p>
The relevant lines of my <code>docker-compose.yml</code> looks like this:
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #ff69b4;">version</span>: <span style="color: #61CE3C;">"2.1"</span>
<span style="color: #ff69b4;">services</span>:
  <span style="color: #ff69b4;">web</span>:
    <span style="color: #ff69b4;">image</span>: abiosoft/caddy:no-stats
    <span style="color: #ff69b4;">ports</span>:  <span style="color: #8B8989; font-style: italic;"># </span><span style="color: #8B8989; font-style: italic;">Expose the webserver ports to the internet</span>
      - <span style="color: #61CE3C;">"80:80"</span>
      - <span style="color: #61CE3C;">"443:443"</span>
    <span style="color: #ff69b4;">environment</span>:
      <span style="color: #8B8989; font-style: italic;"># </span><span style="color: #8B8989; font-style: italic;">This is where caddy places certs after ACME negotiation.</span>
      <span style="color: #ff69b4;">CADDYPATH</span>: <span style="color: #61CE3C;">"/etc/caddycerts"</span>
      <span style="color: #ff69b4;">ACME_AGREE</span>: <span style="color: #61CE3C;">"true"</span>
    <span style="color: #ff69b4;">volumes</span>:
      - /srv/caddy/certs:/etc/caddycerts
      - /srv/caddy/Caddyfile:/etc/Caddyfile  <span style="color: #8B8989; font-style: italic;"># </span><span style="color: #8B8989; font-style: italic;">Configuration</span>
      - /srv/www:/srv/www  <span style="color: #8B8989; font-style: italic;"># </span><span style="color: #8B8989; font-style: italic;">the websites</span>
      - /srv/caddy/logs:/logs
</pre>
</div>

<p>
A keen <code>docker-compose</code>-savy reader will notice I did not specify a
<code>restart: always</code> entry. I had Jade configured to always restart,
however, when requesting new HTTPS certificates from LetsEncrypt, there
is a tendency to misconfigure the domain configuration or Caddyfile,
and if Caddy requests too many HTTPS certificates in a short amount of
time, LetsEcrypt will rate-limit my future requests. Usually this is
only requires an hour or two of waiting, but is frustrating to deal
with when trying to fix my configuration. Instead I rather Caddy
exit after failing to activate all the domains and fix my
configuration first.
</p>
</div>
</div>

<div id="outline-container-org379e44b" class="outline-3">
<h3 id="org379e44b">GitHub Configuration</h3>
<div class="outline-text-3" id="text-org379e44b">
<p>
Simply create the GitHub repository, then add a webhook. It is
important to note the webhook <i>must</i> send a JSON payload. By default a
newly created webhook will send a <code>application/x-www-form-urlencoded</code>
payload and will not work.
</p>
</div>
</div>
</div>

<div id="outline-container-orgb1c9a3f" class="outline-2">
<h2 id="orgb1c9a3f">Conclusion</h2>
<div class="outline-text-2" id="text-orgb1c9a3f">
<p>
With this simple setup I can write posts. I can easily move the
configuration to a new host at will. In addition my setup does not
depend on future use of GitHub as GitLab, Gogs, and other git hosts
offer webhook support in the same way. Most importantly, I can author
org-mode files and have a better balance between features and ease of
use than what markdown offers.
</p>

<p>
Web dev is one of my least
favorite programming exercises. Between all the testing necessary to
ensure a simple site works across many platforms, the trend to use a
very complex system such as webpack and many other tools to produce
simple websites, and the perpetual flux-and-flow between vendors only
partially implementing good features, web dev just doesn't do it for
me. Hence, I am very pleased how simple this project turned out to
be.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="https://orgmode.org/">org-mode homepage</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
<a href="https://orgmode.org/worg/org-blog-wiki.html">Blogs and Wikis with Org</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
<a href="https://github.com/bastibe/org-static-blog/">org-static-blog on GitHub</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
<a href="static/style.css"><code>static/style.css</code></a>
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
<a href="http://tachyons.io/">Tachyons homepage</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
<a href="https://getbootstrap.com/">Bootstrap framework homepage</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7">7</a></sup> <div class="footpara"><p class="footpara">
<a href="https://caddyserver.com/">Caddy webserver homepage</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.8" class="footnum" href="#fnr.8">8</a></sup> <div class="footpara"><p class="footpara">
<a href="https://docs.docker.com/engine/">Docker Engine homepage</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.9" class="footnum" href="#fnr.9">9</a></sup> <div class="footpara"><p class="footpara">
<a href="https://docs.docker.com/compose/overview/"><code>docker-compose</code> homepage</a>
</p></div></div>


</div>
</div><div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-computing.html">computing</a> </div>]]></description>
  <category>computing</category>
  <link>https://blog.winny.tech/2019-01-11-publishing-with-org-static-blog.html</link>
  <pubDate>Fri, 11 Jan 2019 16:00:00 -0600</pubDate>
</item>
<item>
  <title>Toggle Redshift with Keyboard Shortcut</title>
  <description><![CDATA[
<p>
Redshift is a screen-tinting program that achieves similar goals to
the popular f.lux<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> program.
</p>

<p>
I perused through the redshift man-pages and noticed there is no
documented way to toggle redshift. Of course one can click the
notification area icon when using redshift-gtk or <code>SIGTERM</code> the
redshift process, but neither is very user friendly. (The mouse is not
user friendly.) After some awkward DuckDuckGo-ing and Googling I found
an obvious solution on the redshift homepage<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>: simply send <code>SIGUSR1</code> to
the redshift or redshift-gtk process. When using redshift-gtk, one can
choose to send <code>SIGUSR1</code> to either redshift or redshift-gtk.
</p>

<p>
This is the script I came up with:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #8B8989; font-style: italic;">#</span><span style="color: #8B8989; font-style: italic;">!/bin/</span><span style="color: #4c83ff;">sh</span>
<span style="color: #4c83ff;">set</span> -eu
<span style="color: #4c83ff;">if</span> ! pkill -x -SIGUSR1 redshift; <span style="color: #4c83ff;">then</span>
    <span style="color: #4c83ff;">echo</span> <span style="color: #61CE3C;">'Could not find redshift process to toggle.'</span> &gt;&amp;2
    <span style="color: #4c83ff;">exit</span> 1
<span style="color: #4c83ff;">fi</span>
</pre>
</div>

<p>
After installing the script into my system's <code>PATH</code>, now all I have to
do is add a line to my Xbindkeys<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> configuration file (<code>~/.xbindkeysrc.scm</code>) such as:
</p>

<div class="org-src-container">
<pre class="src src-scheme">(xbindkey '(Mod4 F2) <span style="color: #61CE3C;">"toggle-redshift"</span>)
</pre>
</div>

<p>
Now I can type <code>Mod4-F2</code> and toggle Redshift.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<a href="https://justgetflux.com/">f.lux homepage</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
<a href="http://jonls.dk/redshift/#configuration-options">Redshift homepage § Configuration Options</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
<a href="http://www.nongnu.org/xbindkeys/xbindkeys.html">XBindKeys homepage</a>
</p></div></div>


</div>
</div><div class="taglist"><a href="tags.html">Tags:</a> <a href="tag-productivity.html">productivity</a> <a href="tag-computing.html">computing</a> </div>]]></description>
  <category>productivity</category>
  <category>computing</category>
  <link>https://blog.winny.tech/2019-01-09-toggle-redshift-with-keyboard-shortcut.html</link>
  <pubDate>Wed, 09 Jan 2019 08:04:00 -0600</pubDate>
</item>
</channel>
</rss>
